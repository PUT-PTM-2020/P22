#include "esp_camera.h"
#include "Arduino.h"
#include "FS.h"
#include "SD_MMC.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "driver/rtc_io.h"
#include <EEPROM.h>
#define EEPROM_SIZE 1
 
RTC_DATA_ATTR int bootCount = 0;

#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22


char receivedData;
int pictureNumber = 0;



void setup() 
{
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  Serial.begin(115200);
  Serial.setDebugOutput(true);

  camera_config_t config;
        config.ledc_channel = LEDC_CHANNEL_0;
        config.ledc_timer = LEDC_TIMER_0;
        config.pin_d0 = Y2_GPIO_NUM;
        config.pin_d1 = Y3_GPIO_NUM;
        config.pin_d2 = Y4_GPIO_NUM;
        config.pin_d3 = Y5_GPIO_NUM;
        config.pin_d4 = Y6_GPIO_NUM;
        config.pin_d5 = Y7_GPIO_NUM;
        config.pin_d6 = Y8_GPIO_NUM;
        config.pin_d7 = Y9_GPIO_NUM;
        config.pin_xclk = XCLK_GPIO_NUM;
        config.pin_pclk = PCLK_GPIO_NUM;
        config.pin_vsync = VSYNC_GPIO_NUM;
        config.pin_href = HREF_GPIO_NUM;
        config.pin_sscb_sda = SIOD_GPIO_NUM;
        config.pin_sscb_scl = SIOC_GPIO_NUM;
        config.pin_pwdn = PWDN_GPIO_NUM;
        config.pin_reset = RESET_GPIO_NUM;
        config.xclk_freq_hz = 20000000;
        config.pixel_format = PIXFORMAT_JPEG;
        
        pinMode(4, INPUT);
        digitalWrite(4, LOW);
        rtc_gpio_hold_dis(GPIO_NUM_4);
        
        if(psramFound())
        {
          config.frame_size = FRAMESIZE_UXGA;
          config.jpeg_quality = 10;
          config.fb_count = 2;
        } 
        else 
        {
          config.frame_size = FRAMESIZE_SVGA;
          config.jpeg_quality = 12;
          config.fb_count = 1;
        }
        

        esp_err_t err = esp_camera_init(&config);
        
        if (err != ESP_OK) 
        {
          Serial.printf("Wystapil blad podczas uruchamiania kamery: 0x%x", err);
          return;
        }
 

        Serial.println("Ladowanie karty pamieci...");
        delay(500);
        
        if(!SD_MMC.begin())
        {
          Serial.println("Wystapil blad podczas ladowania karty pamieci!");
        }
 

        uint8_t cardType = SD_MMC.cardType();
        
        if(cardType == CARD_NONE)
        {
          Serial.println("Karta pamieci nie zostala znaleziona!");
          return;
        }
} 
 

void loop() 
{
 if(Serial.available() > 0)
  {
      receivedData = (char)Serial.read();
      Serial.print("Otrzymana wartosc: ");
      
      if(receivedData == "1")
      {
       
        camera_fb_t * fb = NULL;
        fb = esp_camera_fb_get();  
        
        if(!fb) 
        {
          Serial.println("Nie udalo sie wykonac fotografii!");
          return;
        }
        EEPROM.begin(EEPROM_SIZE);
        pictureNumber = EEPROM.read(0) + 1;
        String path = "/picture" + String(pictureNumber) + ".jpg";
        fs::FS &fs = SD_MMC;

        Serial.printf("Nazwa fotografii: %s\n", path.c_str());
        File file = fs.open(path.c_str(), FILE_WRITE);
        
        if(!file)
        {
          Serial.println("Nie udalo sie otworzyc fotografii!");
        }
        else 
        {
          file.write(fb->buf, fb->len);
          Serial.printf("Zapisano fotografie pod sciezka: %s\n", path.c_str());
          EEPROM.write(0, pictureNumber);
          EEPROM.commit();
        }
        
        file.close();
        esp_camera_fb_return(fb);
        digitalWrite(13, LOW);
        digitalWrite(4, HIGH);
     }  
     else if(receivedData == "0")
     {
        digitalWrite(13, LOW);
        Serial.println(receiveData);
      }
      else
        Serial.println("Niepoprawna wartosc!");
    }
}